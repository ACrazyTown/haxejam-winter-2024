digraph graphname {
n10588728 [shape=box,label="(10588728)"];
n10588727 [shape=box,label="(10588727)\ntmp = ! que.q.func(this.curFish.data)"];
n10588726 [shape=box,label="(10588726)\nvar que = `[`]\n` = ` + 1\nvar tmp\nvar que = que.inverse"];
n10588725 [shape=box,label="(10588725)"];
n10588724 [shape=box,label="(10588724)\nvar tmp = ! ((` < `.length))"];
n10588724 -> n10588725[style="dashed",color="gray",label="then"];
n10588724 -> n10588726[style="dashed",color="gray",label="next"];
n10588723 [shape=box,label="<loop-head>
(10588723)"];
n10588722 [shape=box,label="(10588722)\nvar ` = 0\nvar ` = this.checklistQuestions"];
n10588722 -> n10588723[style="dashed",color="gray",label="merge"];
n10588721 [shape=box,label="(10588721)\nvar passesRequirements = true"];
n10588720 [shape=box,label="(10588720)"];
n10588719 [shape=box,label="(10588719)\nthis.openSubState(new states.substate.EndingSubState(states.substate.Ending.EXPLODE))"];
n10588718 [shape=box,label="(10588718)\nvar tmp = ! trashed"];
n10588718 -> n10588719[style="dashed",color="gray",label="then"];
n10588718 -> n10588720[style="dashed",color="gray",label="next"];
n10588717 [shape=box,label="(10588717)\nvar _this = this.bombSfx\n_this.cleanup(_this.autoDestroy, true)"];
n10588716 [shape=box,label="(10588716)"];
n10588716 -> n10588717[style="dashed",color="gray",label="sub"];
n10588716 -> n10588718[style="dashed",color="gray",label="next"];
n10588715 [shape=box,label="(10588715)\nvar tmp = this.curFish.data.bomb"];
n10588715 -> n10588716[style="dashed",color="gray",label="then"];
n10588715 -> n10588721[style="dashed",color="gray",label="next"];
n10588714 [shape=box,label="(10588714)"];
n10588713 [shape=box,label="(10588713)\nthis.openSubState(new states.substate.EndingSubState(states.substate.Ending.EVIL))"];
n10588712 [shape=box,label="(10588712)\nthis.dimOverlay.set_color(cast -1)\nthis.dimOverlay.set_blend(cast 10)\nthis.dimOverlay.set_alpha(0)"];
n10588711 [shape=box,label="(10588711)\nvar trashed = trashed"];
n10588711 -> n10588712[style="dashed",color="gray",label="then"];
n10588711 -> n10588713[style="dashed",color="gray",label="else"];
n10588711 -> n10588714[style="dashed",color="gray",label="next"];
n10588710 [shape=box,label="<function-end>
(10588710)"];
n10588709 [shape=box,label="<function-begin>
(10588709)\nthis.conveyorArea.set_alpha(0)\nthis.trashArea.set_alpha(0)\nvar tmp = this.curFish.data.evil"];
n10588709 -> n10588711[style="dashed",color="gray",label="then"];
n10588709 -> n10588715[style="dashed",color="gray",label="next"];
n1 [shape=box,label="<root>
(1)"];
}
